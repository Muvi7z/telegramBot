// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package messages

//go:generate minimock -i github.com/Muvi7z/telegramBot.git/internal/model/messages.RateStorage -o rate_storage_mock_test.go -n RateStorageMock -p messages

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/Muvi7z/telegramBot.git/internal/domain"
	"github.com/gojuno/minimock/v3"
)

// RateStorageMock implements RateStorage
type RateStorageMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetRate          func(ctx context.Context, Code string, time time.Time) (rp1 *domain.Rate, err error)
	funcGetRateOrigin    string
	inspectFuncGetRate   func(ctx context.Context, Code string, time time.Time)
	afterGetRateCounter  uint64
	beforeGetRateCounter uint64
	GetRateMock          mRateStorageMockGetRate
}

// NewRateStorageMock returns a mock for RateStorage
func NewRateStorageMock(t minimock.Tester) *RateStorageMock {
	m := &RateStorageMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetRateMock = mRateStorageMockGetRate{mock: m}
	m.GetRateMock.callArgs = []*RateStorageMockGetRateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRateStorageMockGetRate struct {
	optional           bool
	mock               *RateStorageMock
	defaultExpectation *RateStorageMockGetRateExpectation
	expectations       []*RateStorageMockGetRateExpectation

	callArgs []*RateStorageMockGetRateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RateStorageMockGetRateExpectation specifies expectation struct of the RateStorage.GetRate
type RateStorageMockGetRateExpectation struct {
	mock               *RateStorageMock
	params             *RateStorageMockGetRateParams
	paramPtrs          *RateStorageMockGetRateParamPtrs
	expectationOrigins RateStorageMockGetRateExpectationOrigins
	results            *RateStorageMockGetRateResults
	returnOrigin       string
	Counter            uint64
}

// RateStorageMockGetRateParams contains parameters of the RateStorage.GetRate
type RateStorageMockGetRateParams struct {
	ctx  context.Context
	Code string
	time time.Time
}

// RateStorageMockGetRateParamPtrs contains pointers to parameters of the RateStorage.GetRate
type RateStorageMockGetRateParamPtrs struct {
	ctx  *context.Context
	Code *string
	time *time.Time
}

// RateStorageMockGetRateResults contains results of the RateStorage.GetRate
type RateStorageMockGetRateResults struct {
	rp1 *domain.Rate
	err error
}

// RateStorageMockGetRateOrigins contains origins of expectations of the RateStorage.GetRate
type RateStorageMockGetRateExpectationOrigins struct {
	origin     string
	originCtx  string
	originCode string
	originTime string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetRate *mRateStorageMockGetRate) Optional() *mRateStorageMockGetRate {
	mmGetRate.optional = true
	return mmGetRate
}

// Expect sets up expected params for RateStorage.GetRate
func (mmGetRate *mRateStorageMockGetRate) Expect(ctx context.Context, Code string, time time.Time) *mRateStorageMockGetRate {
	if mmGetRate.mock.funcGetRate != nil {
		mmGetRate.mock.t.Fatalf("RateStorageMock.GetRate mock is already set by Set")
	}

	if mmGetRate.defaultExpectation == nil {
		mmGetRate.defaultExpectation = &RateStorageMockGetRateExpectation{}
	}

	if mmGetRate.defaultExpectation.paramPtrs != nil {
		mmGetRate.mock.t.Fatalf("RateStorageMock.GetRate mock is already set by ExpectParams functions")
	}

	mmGetRate.defaultExpectation.params = &RateStorageMockGetRateParams{ctx, Code, time}
	mmGetRate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetRate.expectations {
		if minimock.Equal(e.params, mmGetRate.defaultExpectation.params) {
			mmGetRate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRate.defaultExpectation.params)
		}
	}

	return mmGetRate
}

// ExpectCtxParam1 sets up expected param ctx for RateStorage.GetRate
func (mmGetRate *mRateStorageMockGetRate) ExpectCtxParam1(ctx context.Context) *mRateStorageMockGetRate {
	if mmGetRate.mock.funcGetRate != nil {
		mmGetRate.mock.t.Fatalf("RateStorageMock.GetRate mock is already set by Set")
	}

	if mmGetRate.defaultExpectation == nil {
		mmGetRate.defaultExpectation = &RateStorageMockGetRateExpectation{}
	}

	if mmGetRate.defaultExpectation.params != nil {
		mmGetRate.mock.t.Fatalf("RateStorageMock.GetRate mock is already set by Expect")
	}

	if mmGetRate.defaultExpectation.paramPtrs == nil {
		mmGetRate.defaultExpectation.paramPtrs = &RateStorageMockGetRateParamPtrs{}
	}
	mmGetRate.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetRate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetRate
}

// ExpectCodeParam2 sets up expected param Code for RateStorage.GetRate
func (mmGetRate *mRateStorageMockGetRate) ExpectCodeParam2(Code string) *mRateStorageMockGetRate {
	if mmGetRate.mock.funcGetRate != nil {
		mmGetRate.mock.t.Fatalf("RateStorageMock.GetRate mock is already set by Set")
	}

	if mmGetRate.defaultExpectation == nil {
		mmGetRate.defaultExpectation = &RateStorageMockGetRateExpectation{}
	}

	if mmGetRate.defaultExpectation.params != nil {
		mmGetRate.mock.t.Fatalf("RateStorageMock.GetRate mock is already set by Expect")
	}

	if mmGetRate.defaultExpectation.paramPtrs == nil {
		mmGetRate.defaultExpectation.paramPtrs = &RateStorageMockGetRateParamPtrs{}
	}
	mmGetRate.defaultExpectation.paramPtrs.Code = &Code
	mmGetRate.defaultExpectation.expectationOrigins.originCode = minimock.CallerInfo(1)

	return mmGetRate
}

// ExpectTimeParam3 sets up expected param time for RateStorage.GetRate
func (mmGetRate *mRateStorageMockGetRate) ExpectTimeParam3(time time.Time) *mRateStorageMockGetRate {
	if mmGetRate.mock.funcGetRate != nil {
		mmGetRate.mock.t.Fatalf("RateStorageMock.GetRate mock is already set by Set")
	}

	if mmGetRate.defaultExpectation == nil {
		mmGetRate.defaultExpectation = &RateStorageMockGetRateExpectation{}
	}

	if mmGetRate.defaultExpectation.params != nil {
		mmGetRate.mock.t.Fatalf("RateStorageMock.GetRate mock is already set by Expect")
	}

	if mmGetRate.defaultExpectation.paramPtrs == nil {
		mmGetRate.defaultExpectation.paramPtrs = &RateStorageMockGetRateParamPtrs{}
	}
	mmGetRate.defaultExpectation.paramPtrs.time = &time
	mmGetRate.defaultExpectation.expectationOrigins.originTime = minimock.CallerInfo(1)

	return mmGetRate
}

// Inspect accepts an inspector function that has same arguments as the RateStorage.GetRate
func (mmGetRate *mRateStorageMockGetRate) Inspect(f func(ctx context.Context, Code string, time time.Time)) *mRateStorageMockGetRate {
	if mmGetRate.mock.inspectFuncGetRate != nil {
		mmGetRate.mock.t.Fatalf("Inspect function is already set for RateStorageMock.GetRate")
	}

	mmGetRate.mock.inspectFuncGetRate = f

	return mmGetRate
}

// Return sets up results that will be returned by RateStorage.GetRate
func (mmGetRate *mRateStorageMockGetRate) Return(rp1 *domain.Rate, err error) *RateStorageMock {
	if mmGetRate.mock.funcGetRate != nil {
		mmGetRate.mock.t.Fatalf("RateStorageMock.GetRate mock is already set by Set")
	}

	if mmGetRate.defaultExpectation == nil {
		mmGetRate.defaultExpectation = &RateStorageMockGetRateExpectation{mock: mmGetRate.mock}
	}
	mmGetRate.defaultExpectation.results = &RateStorageMockGetRateResults{rp1, err}
	mmGetRate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetRate.mock
}

// Set uses given function f to mock the RateStorage.GetRate method
func (mmGetRate *mRateStorageMockGetRate) Set(f func(ctx context.Context, Code string, time time.Time) (rp1 *domain.Rate, err error)) *RateStorageMock {
	if mmGetRate.defaultExpectation != nil {
		mmGetRate.mock.t.Fatalf("Default expectation is already set for the RateStorage.GetRate method")
	}

	if len(mmGetRate.expectations) > 0 {
		mmGetRate.mock.t.Fatalf("Some expectations are already set for the RateStorage.GetRate method")
	}

	mmGetRate.mock.funcGetRate = f
	mmGetRate.mock.funcGetRateOrigin = minimock.CallerInfo(1)
	return mmGetRate.mock
}

// When sets expectation for the RateStorage.GetRate which will trigger the result defined by the following
// Then helper
func (mmGetRate *mRateStorageMockGetRate) When(ctx context.Context, Code string, time time.Time) *RateStorageMockGetRateExpectation {
	if mmGetRate.mock.funcGetRate != nil {
		mmGetRate.mock.t.Fatalf("RateStorageMock.GetRate mock is already set by Set")
	}

	expectation := &RateStorageMockGetRateExpectation{
		mock:               mmGetRate.mock,
		params:             &RateStorageMockGetRateParams{ctx, Code, time},
		expectationOrigins: RateStorageMockGetRateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetRate.expectations = append(mmGetRate.expectations, expectation)
	return expectation
}

// Then sets up RateStorage.GetRate return parameters for the expectation previously defined by the When method
func (e *RateStorageMockGetRateExpectation) Then(rp1 *domain.Rate, err error) *RateStorageMock {
	e.results = &RateStorageMockGetRateResults{rp1, err}
	return e.mock
}

// Times sets number of times RateStorage.GetRate should be invoked
func (mmGetRate *mRateStorageMockGetRate) Times(n uint64) *mRateStorageMockGetRate {
	if n == 0 {
		mmGetRate.mock.t.Fatalf("Times of RateStorageMock.GetRate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetRate.expectedInvocations, n)
	mmGetRate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetRate
}

func (mmGetRate *mRateStorageMockGetRate) invocationsDone() bool {
	if len(mmGetRate.expectations) == 0 && mmGetRate.defaultExpectation == nil && mmGetRate.mock.funcGetRate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetRate.mock.afterGetRateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetRate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetRate implements RateStorage
func (mmGetRate *RateStorageMock) GetRate(ctx context.Context, Code string, time time.Time) (rp1 *domain.Rate, err error) {
	mm_atomic.AddUint64(&mmGetRate.beforeGetRateCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRate.afterGetRateCounter, 1)

	mmGetRate.t.Helper()

	if mmGetRate.inspectFuncGetRate != nil {
		mmGetRate.inspectFuncGetRate(ctx, Code, time)
	}

	mm_params := RateStorageMockGetRateParams{ctx, Code, time}

	// Record call args
	mmGetRate.GetRateMock.mutex.Lock()
	mmGetRate.GetRateMock.callArgs = append(mmGetRate.GetRateMock.callArgs, &mm_params)
	mmGetRate.GetRateMock.mutex.Unlock()

	for _, e := range mmGetRate.GetRateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmGetRate.GetRateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRate.GetRateMock.defaultExpectation.Counter, 1)
		mm_want := mmGetRate.GetRateMock.defaultExpectation.params
		mm_want_ptrs := mmGetRate.GetRateMock.defaultExpectation.paramPtrs

		mm_got := RateStorageMockGetRateParams{ctx, Code, time}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetRate.t.Errorf("RateStorageMock.GetRate got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetRate.GetRateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.Code != nil && !minimock.Equal(*mm_want_ptrs.Code, mm_got.Code) {
				mmGetRate.t.Errorf("RateStorageMock.GetRate got unexpected parameter Code, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetRate.GetRateMock.defaultExpectation.expectationOrigins.originCode, *mm_want_ptrs.Code, mm_got.Code, minimock.Diff(*mm_want_ptrs.Code, mm_got.Code))
			}

			if mm_want_ptrs.time != nil && !minimock.Equal(*mm_want_ptrs.time, mm_got.time) {
				mmGetRate.t.Errorf("RateStorageMock.GetRate got unexpected parameter time, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetRate.GetRateMock.defaultExpectation.expectationOrigins.originTime, *mm_want_ptrs.time, mm_got.time, minimock.Diff(*mm_want_ptrs.time, mm_got.time))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetRate.t.Errorf("RateStorageMock.GetRate got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetRate.GetRateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetRate.GetRateMock.defaultExpectation.results
		if mm_results == nil {
			mmGetRate.t.Fatal("No results are set for the RateStorageMock.GetRate")
		}
		return (*mm_results).rp1, (*mm_results).err
	}
	if mmGetRate.funcGetRate != nil {
		return mmGetRate.funcGetRate(ctx, Code, time)
	}
	mmGetRate.t.Fatalf("Unexpected call to RateStorageMock.GetRate. %v %v %v", ctx, Code, time)
	return
}

// GetRateAfterCounter returns a count of finished RateStorageMock.GetRate invocations
func (mmGetRate *RateStorageMock) GetRateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRate.afterGetRateCounter)
}

// GetRateBeforeCounter returns a count of RateStorageMock.GetRate invocations
func (mmGetRate *RateStorageMock) GetRateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRate.beforeGetRateCounter)
}

// Calls returns a list of arguments used in each call to RateStorageMock.GetRate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRate *mRateStorageMockGetRate) Calls() []*RateStorageMockGetRateParams {
	mmGetRate.mutex.RLock()

	argCopy := make([]*RateStorageMockGetRateParams, len(mmGetRate.callArgs))
	copy(argCopy, mmGetRate.callArgs)

	mmGetRate.mutex.RUnlock()

	return argCopy
}

// MinimockGetRateDone returns true if the count of the GetRate invocations corresponds
// the number of defined expectations
func (m *RateStorageMock) MinimockGetRateDone() bool {
	if m.GetRateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetRateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetRateMock.invocationsDone()
}

// MinimockGetRateInspect logs each unmet expectation
func (m *RateStorageMock) MinimockGetRateInspect() {
	for _, e := range m.GetRateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RateStorageMock.GetRate at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetRateCounter := mm_atomic.LoadUint64(&m.afterGetRateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetRateMock.defaultExpectation != nil && afterGetRateCounter < 1 {
		if m.GetRateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RateStorageMock.GetRate at\n%s", m.GetRateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RateStorageMock.GetRate at\n%s with params: %#v", m.GetRateMock.defaultExpectation.expectationOrigins.origin, *m.GetRateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRate != nil && afterGetRateCounter < 1 {
		m.t.Errorf("Expected call to RateStorageMock.GetRate at\n%s", m.funcGetRateOrigin)
	}

	if !m.GetRateMock.invocationsDone() && afterGetRateCounter > 0 {
		m.t.Errorf("Expected %d calls to RateStorageMock.GetRate at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetRateMock.expectedInvocations), m.GetRateMock.expectedInvocationsOrigin, afterGetRateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RateStorageMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetRateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RateStorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RateStorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetRateDone()
}
