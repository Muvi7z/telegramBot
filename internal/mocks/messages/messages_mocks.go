// Code generated by MockGen. DO NOT EDIT.
// Source: incoming_msg.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Muvi7z/telegramBot.git/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(userID int64, text string, buttons ...map[string]string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{userID, text}
	for _, a := range buttons {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(userID, text interface{}, buttons ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{userID, text}, buttons...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), varargs...)
}

// MockRateStorage is a mock of RateStorage interface.
type MockRateStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRateStorageMockRecorder
}

// MockRateStorageMockRecorder is the mock recorder for MockRateStorage.
type MockRateStorageMockRecorder struct {
	mock *MockRateStorage
}

// NewMockRateStorage creates a new mock instance.
func NewMockRateStorage(ctrl *gomock.Controller) *MockRateStorage {
	mock := &MockRateStorage{ctrl: ctrl}
	mock.recorder = &MockRateStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateStorage) EXPECT() *MockRateStorageMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockRateStorage) GetRate(ctx context.Context, Code string, time time.Time) (*domain.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", ctx, Code, time)
	ret0, _ := ret[0].(*domain.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockRateStorageMockRecorder) GetRate(ctx, Code, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockRateStorage)(nil).GetRate), ctx, Code, time)
}
